/**
 * Custom title
 * This is a very custom OpenAPI schema
 *
 * The version of the OpenAPI document: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  IMFPPPCountry,
  LunchoResult,
} from './models';

/**
 * countries - parameters interface
 */
export interface ICountriesParams {
}

/**
 * lunchos - parameters interface
 */
export interface ILunchosParams {
  lunchoValue: number;
}

/**
 * test - parameters interface
 */
export interface ITestParams {
  countryCode?: string;
  lunchoValue?: number;
}

/**
 * DefaultApi - API class
 */
@autoinject()
export class DefaultApi extends Api {

  /**
   * Creates a new DefaultApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Countries
   * Returns country data for all countries.
   */
  async countries(): Promise<{ [key: string]: IMFPPPCountry; }> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/countries`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Lunchos
   * @param params.lunchoValue 
   */
  async lunchos(params: ILunchosParams): Promise<Array<LunchoResult>> {
    // Verify required parameters are set
    this.ensureParamIsSet('lunchos', params, 'lunchoValue');

    // Create URL to call
    const url = `${this.basePath}/lunchos`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'luncho_value': params['lunchoValue'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Test
   * @param params.countryCode 
   * @param params.lunchoValue 
   */
  async test(params: ITestParams): Promise<LunchoResult> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/test/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'country_code': params['countryCode'],
        'luncho_value': params['lunchoValue'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

