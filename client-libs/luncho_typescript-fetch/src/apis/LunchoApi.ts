/* tslint:disable */
/* eslint-disable */
/**
 * Client library for Luncho API. 
 * Use luncho.ts and luncho.py rather than LunchoAPI.ts and others.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LunchoData,
    LunchoDataFromJSON,
    LunchoDataToJSON,
} from '../models';

export interface LunchoDataRequest {
    countryCode: string;
}

/**
 * 
 */
export class LunchoApi extends runtime.BaseAPI {

    /**
     *   Returns a dict of supported country codes and names so that you can show a dropdown list of countries. Data size is about 3.5KB.    E.g. {\'JP\': \'Japan\', \'US\': \'United States\'...}.
     * Countries
     */
    async countriesRaw(): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/countries`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     *   Returns a dict of supported country codes and names so that you can show a dropdown list of countries. Data size is about 3.5KB.    E.g. {\'JP\': \'Japan\', \'US\': \'United States\'...}.
     * Countries
     */
    async countries(): Promise<{ [key: string]: string; }> {
        const response = await this.countriesRaw();
        return await response.value();
    }

    /**
     * Returns LunchoData that is needed to convert between Luncho and local currency of the countryCode. Data size is about 400 bytes.
     * Lunchodata
     */
    async lunchoDataRaw(requestParameters: LunchoDataRequest): Promise<runtime.ApiResponse<LunchoData>> {
        if (requestParameters.countryCode === null || requestParameters.countryCode === undefined) {
            throw new runtime.RequiredError('countryCode','Required parameter requestParameters.countryCode was null or undefined when calling lunchoData.');
        }

        const queryParameters: any = {};

        if (requestParameters.countryCode !== undefined) {
            queryParameters['country_code'] = requestParameters.countryCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/luncho-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LunchoDataFromJSON(jsonValue));
    }

    /**
     * Returns LunchoData that is needed to convert between Luncho and local currency of the countryCode. Data size is about 400 bytes.
     * Lunchodata
     */
    async lunchoData(requestParameters: LunchoDataRequest): Promise<LunchoData> {
        const response = await this.lunchoDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns A list of LunchoDatas for all supported countries. Data size is about 40KB.
     * Lunchodatas
     */
    async lunchoDatasRaw(): Promise<runtime.ApiResponse<{ [key: string]: LunchoData; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/luncho-datas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, LunchoDataFromJSON));
    }

    /**
     * Returns A list of LunchoDatas for all supported countries. Data size is about 40KB.
     * Lunchodatas
     */
    async lunchoDatas(): Promise<{ [key: string]: LunchoData; }> {
        const response = await this.lunchoDatasRaw();
        return await response.value();
    }

}
