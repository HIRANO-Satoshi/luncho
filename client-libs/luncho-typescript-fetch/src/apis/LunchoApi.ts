/* tslint:disable */
/* eslint-disable */
/**
 * Custom title
 * This is a very custom OpenAPI schema
 *
 * The version of the OpenAPI document: 2.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HTTPValidationError,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LunchoData,
    LunchoDataFromJSON,
    LunchoDataToJSON,
} from '../models';

export interface LunchoDataRequest {
    countryCode?: string;
    clientRegion?: string;
    cloudfrontViewerCountry?: string;
}

/**
 * 
 */
export class LunchoApi extends runtime.BaseAPI {

    /**
     * Returns a list of supported country codes.
     * Countrycodes
     */
    async countryCodesRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/country-codes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of supported country codes.
     * Countrycodes
     */
    async countryCodes(): Promise<Array<string>> {
        const response = await this.countryCodesRaw();
        return await response.value();
    }

    /**
     * Returns LunchoData that is needed to convert between Luncho and local currency of the countryCode. If the countryCode is not specified, estimate it from IP address.
     * Lunchodata
     */
    async lunchoDataRaw(requestParameters: LunchoDataRequest): Promise<runtime.ApiResponse<LunchoData>> {
        const queryParameters: any = {};

        if (requestParameters.countryCode !== undefined) {
            queryParameters['country_code'] = requestParameters.countryCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.clientRegion !== undefined && requestParameters.clientRegion !== null) {
            headerParameters['client-region'] = String(requestParameters.clientRegion);
        }

        if (requestParameters.cloudfrontViewerCountry !== undefined && requestParameters.cloudfrontViewerCountry !== null) {
            headerParameters['cloudfront-viewer-country'] = String(requestParameters.cloudfrontViewerCountry);
        }

        const response = await this.request({
            path: `/luncho-data`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LunchoDataFromJSON(jsonValue));
    }

    /**
     * Returns LunchoData that is needed to convert between Luncho and local currency of the countryCode. If the countryCode is not specified, estimate it from IP address.
     * Lunchodata
     */
    async lunchoData(requestParameters: LunchoDataRequest): Promise<LunchoData> {
        const response = await this.lunchoDataRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns A list of LunchoDatas for all supported countries.
     * Lunchodatas
     */
    async lunchoDatasRaw(): Promise<runtime.ApiResponse<Array<LunchoData>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/luncho-datas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LunchoDataFromJSON));
    }

    /**
     * Returns A list of LunchoDatas for all supported countries.
     * Lunchodatas
     */
    async lunchoDatas(): Promise<Array<LunchoData>> {
        const response = await this.lunchoDatasRaw();
        return await response.value();
    }

}
