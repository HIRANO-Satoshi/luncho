"use strict";
/**
 * Custom title
 * This is a very custom OpenAPI schema
 *
 * The version of the OpenAPI document: 2.5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const BASE_PATH = 'http://localhost'.replace(/\/+$/, '');
class Api {
    constructor(httpClient, authStorage, basePath = BASE_PATH) {
        this.basePath = basePath;
        this.httpClient = httpClient;
        this.authStorage = authStorage;
    }
    /**
     * Encodes a query string.
     *
     * @param params The params to encode.
     * @return An encoded query string.
     */
    queryString(params) {
        const queries = [];
        for (let key in params) {
            const value = this.toString(params[key]);
            if (value != null) {
                queries.push(`${key}=${encodeURIComponent(value)}`);
            }
        }
        return queries.join('&');
    }
    /**
     * Converts a value to string.
     *
     * @param value The value to convert.
     */
    toString(value) {
        if (value === null) {
            return null;
        }
        switch (typeof value) {
            case 'undefined': return null;
            case 'boolean': return value ? 'true' : 'false';
            case 'string': return value;
            default: return '' + value;
        }
    }
    /**
     * Ensures that a given parameter is set.
     *
     * @param context A name for the callee's context.
     * @param params The parameters being set.
     * @param paramName The required parameter to check.
     */
    ensureParamIsSet(context, params, paramName) {
        if (null === params[paramName]) {
            throw new Error(`Missing required parameter ${paramName} when calling ${context}`);
        }
    }
}
exports.Api = Api;
