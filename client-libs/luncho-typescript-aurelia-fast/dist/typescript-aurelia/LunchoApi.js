"use strict";
/**
 * Custom title
 * This is a very custom OpenAPI schema
 *
 * The version of the OpenAPI document: 2.5.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LunchoApi = void 0;
const aurelia_framework_1 = require("aurelia-framework");
const Api_1 = require("./Api");
/**
 * LunchoApi - API class
 */
let LunchoApi = class LunchoApi extends Api_1.Api {
    /**
     * Creates a new LunchoApi class.
     *
     * @param httpClient The Aurelia HTTP client to be injected.
     * @param authStorage A storage for authentication data.
     */
    constructor(httpClient, authStorage) {
        super(httpClient, authStorage);
    }
    /**
     * Countries
     * Returns country data for all countries.
     */
    countries() {
        return __awaiter(this, void 0, void 0, function* () {
            // Verify required parameters are set
            // Create URL to call
            const url = `${this.basePath}/countries`;
            const response = yield this.httpClient.createRequest(url)
                // Set HTTP method
                .asGet()
                // Send the request
                .send();
            if (response.statusCode < 200 || response.statusCode >= 300) {
                throw new Error(response.content);
            }
            // Extract the content
            return response.content;
        });
    }
    /**
     * Luncho
     * @param params.countryCode
     * @param params.lunchoValue
     */
    luncho(params) {
        return __awaiter(this, void 0, void 0, function* () {
            // Verify required parameters are set
            // Create URL to call
            const url = `${this.basePath}/luncho`;
            const response = yield this.httpClient.createRequest(url)
                // Set HTTP method
                .asGet()
                // Set query parameters
                .withParams({
                'country_code': params['countryCode'],
                'luncho_value': params['lunchoValue'],
            })
                // Send the request
                .send();
            if (response.statusCode < 200 || response.statusCode >= 300) {
                throw new Error(response.content);
            }
            // Extract the content
            return response.content;
        });
    }
    /**
     * Lunchos
     * @param params.lunchoValue
     */
    lunchos(params) {
        return __awaiter(this, void 0, void 0, function* () {
            // Verify required parameters are set
            this.ensureParamIsSet('lunchos', params, 'lunchoValue');
            // Create URL to call
            const url = `${this.basePath}/lunchos`;
            const response = yield this.httpClient.createRequest(url)
                // Set HTTP method
                .asGet()
                // Set query parameters
                .withParams({
                'luncho_value': params['lunchoValue'],
            })
                // Send the request
                .send();
            if (response.statusCode < 200 || response.statusCode >= 300) {
                throw new Error(response.content);
            }
            // Extract the content
            return response.content;
        });
    }
};
LunchoApi = __decorate([
    aurelia_framework_1.autoinject()
], LunchoApi);
exports.LunchoApi = LunchoApi;
